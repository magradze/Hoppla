// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  role          Role          @default(USER)
  phone         String?
  address       String?
  birthday      DateTime?     @map("birth_day")
  gender        Gender?
  password      String?
  accounts      Account[]
  sessions      Session[]
  rides         Ride[]
  createdAt     DateTime?     @map("created_at")
  trips         Trip[]
  cars          Car[]
  ratings       UserRating[]
  CompanyUser   CompanyUser[]

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

enum Gender {
  Male
  Female
}

model UserRating {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating    Decimal
  comment   String?
  authorId  String   @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("user_ratings")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Ride {
  id          String     @id @default(cuid())
  name        String
  description String?
  from        String     @map("start_location")
  to          String     @map("end_location")
  distance    Float
  duration    Int
  seats       Int
  price       Float
  startDate   String     @map("start_date")
  startTime   String     @map("start_time")
  userId      String     @map("user_id")
  driver      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  stops       Stop[]
  carId       String?    @map("car_id")
  rideRules   RideRule[]
  status      RideStatus @default(PENDING)
  Trip        Trip[]
  companyId   String?    @map("company_id")
  createdAt   DateTime   @default(now()) @map("created_at")

  @@map("rides")
}

model Stop {
  id     String @id @default(cuid())
  name   String
  rideId String @map("ride_id")
  ride   Ride   @relation(fields: [rideId], references: [id], onDelete: Cascade)

  @@map("stops")
}

model RideRule {
  id        String    @id @default(cuid())
  rideId    String    @map("ride_id")
  ride      Ride      @relation(fields: [rideId], references: [id], onDelete: Cascade)
  title     String
  value     String
  createdAt DateTime? @map("created_at")

  @@map("ride_rules")
}

enum RideStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELED
  COMPLETED
}

model Trip {
  id         String @id @default(cuid())
  rideId     String @map("ride_id")
  ride       Ride   @relation(fields: [rideId], references: [id], onDelete: Cascade)
  passangers User[]

  @@map("trips")
}

model Car {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  brand       String
  model       String
  year        Int
  color       String
  plateNumber String   @map("plate_number")
  createdAt   DateTime @default(now()) @map("created_at")

  @@map("cars")
}

// model TripRequest {
//   id            String   @id @default(cuid())
//   tripId        String   @map("trip_id")
//   trip          Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
//   userId        String   @map("user_id")
//   user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   status        String
//   passangers    Int
//   price         Float
//   startDate     DateTime @map("start_date")
//   startLocation String   @map("start_location")
//   endLocation   String   @map("end_location")
//
//   @@map("trip_requests")
// }
//
// model TripRequestMessage {
//   id            String   @id @default(cuid())
//   tripRequestId String   @map("trip_request_id")
//   tripRequest   TripRequest     @relation(fields: [tripRequestId], references: [id], onDelete: Cascade)
//   userId        String   @map("user_id")
//   user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   message       String
//   createdAt     DateTime @map("created_at")
//   updatedAt     DateTime @map("updated_at")
//
//   @@map("trip_request_messages")
// }

model SiteSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  valueType String   @map("value_type")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("site_settings")
}

// model Notification {
//   id        String   @id @default(cuid())
//   userId    String   @map("user_id")
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   title     String
//   message   String
//   type      String
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @default(now()) @map("updated_at")
//
//   @@map("notifications")
// }
//
// model NotificationSetting {
//   id        String   @id @default(cuid())
//   userId    String   @map("user_id")
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   type      String
//   value     Boolean
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @default(now()) @map("updated_at")
//
//   @@map("notification_settings")
// }

// Company
model Company {
  id           String              @id @default(cuid())
  name         String
  email        String?
  phone        String?
  address      String?
  logo         String?
  description  String?
  companyUsers CompanyUser[]
  ratings      CompanyRating[]
  vehicles     CompanyVehicle[]
  directions   CompanyDirections[]
  createdAt    DateTime            @default(now()) @map("created_at")
  updatedAt    DateTime            @default(now()) @map("updated_at")

  @@map("companies")
}

model CompanyUser {
  id        String   @id @default(cuid())
  companyId String   @map("company_id")
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @default(USER)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  @@map("company_users")
}

model CompanyRating {
  id        String   @id @default(cuid())
  companyId String   @map("company_id")
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  rating    Decimal
  comment   String?
  authorId  String   @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@map("company_ratings")
}

model CompanyVehicle {
  id        String             @id @default(cuid())
  companyId String             @map("company_id")
  company   Company            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  brand     String
  model     String
  year      Int
  color     String
  plate     String
  type      CompanyVehicleType @map("vehicle_type")
  driverId  String             @map("driver_id")
  createdAt DateTime           @default(now()) @map("created_at")

  @@map("company_vehicles")
}

enum CompanyVehicleType {
  BUS
  MINI_BUS
  VAN
  CAR
  TRUCK
  MOTORCYCLE
  BICYCLE
}

// Directions
model Direction {
  id                String              @id @default(cuid())
  name              String
  from              String
  fromLat           Float               @map("from_lat")
  fromLong          Float               @map("from_long")
  to                String
  toLat             Float               @map("to_lat")
  toLong            Float               @map("to_long")
  distance          Float
  duration          Int
  stops             DirectionStop[]
  price             Float
  CompanyDirections CompanyDirections[]
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @default(now()) @map("updated_at")

  @@map("directions")
}

model DirectionStop {
  id          String    @id @default(cuid())
  directionId String    @map("direction_id")
  direction   Direction @relation(fields: [directionId], references: [id], onDelete: Cascade)
  name        String
  lat         Float?
  long        Float?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")

  @@map("direction_stops")
}

model CompanyDirections {
  id          String    @id @default(cuid())
  companyId   String    @map("company_id")
  company     Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  directionId String    @map("direction_id")
  direction   Direction @relation(fields: [directionId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")

  @@map("company_directions")
}
